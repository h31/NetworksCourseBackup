#Описание протокола взаимодействия клиентской и серверной части
#Задание: "Система терминального доступа"

__Система терминального доступа__ представляет сервис клиенту для осуществления команд в терминале на удаленном компьютере. Система состоит из двух частей: 

1) __Серверная часть__ - находится на галвном компьютере, предоставляющем свой     терминал для пользования другим компьютерам и осуществления операций согласно правам доступа клиента к данному компьютеру.

2) __Клиентская часть__ - является внешним компьютером, получающим возможность обращения к компьютеру на сервере для осуществления необходимых операций.

Сервер предоставляет право доступа к терминалу для нескольких подключенных пользователей. В его основные задачи входит проверка пользователя и пароля, предоставление списка доступных команд и проверка их ввода клиентом, обнаружение и исправление ошибок.

Клиент имеет право запускать только те команды, которые указаны в списке допустимых, а также осуществляет мониторинг ошибок при соединении с сервером.

Протокол взаимодействия опишем отдельно для клиента и для сервера.

###Описание протокола взаимодействия серверной части

__Серверная часть__ инициализируется запуском с указанием используемого TCP-порта. После чего сервер переводится в режим прослушивания порта. Опишем как работает протокол для взаимодействия с один клиентом.
Сервер ожидает подключения клиента и получения первого сообщения с указанием имени пользователя и пароля. Имя пользователя и пароль присылаются в следующем формате:

\<username>_\<password>

*Синтаксический обработчик* прочтет имя пользователя и пароль и запишет их в переменные. Далее сервер начнет проводить аутентификацию имени пользователя и пароля, аутентификация будет происходить как на серверной, так и на клиентской части. Сначала сервер обратиться к файлу, содержащему имена и пароли всех компьютеров, у которых есть доступ к удаленному терминалу. Данный файл имеет формат .txt и содержит данные о пользователе, пароле и используемых командах в следующем формате:

| Идентификатор   |      Значение      |
|----------|:-------------:|
| Имя пользователя |  Антон |
| Пароль |    1234   |
| Доступные команды терминала | cd ls mkdir |
| Имя пользователя |  User |
| Пароль |    5678   |
| Доступные команды терминала | cd ls |
| Имя пользователя |  Root |
| Пароль |    0912   |
| Доступные команды терминала | cd ls rm |

---
Данная таблица представлет структуру файла для трёх пользователей.

Сервер произведет сравнение данных, полученных от пользователя с данными в файле: при положительном результате клиент будет переведен на второй этап аутентификации пользователя и пароля. Клиенту будет отправлено число для пересчета хэш-функции имени пользователя и пароля. Сервер также будет осуществлять подсчет хэш-фугкций имени пользователя и пароля. Клиент, имеющий доступ к терминалу владеет специальной функцией подсчета хэш-кода, как и сервер. Для подсчета кода взята функция Ly.

#####Ly- функция
```c
    unsigned int HashLy(const char * str)
    {
        unsigned int hash = 0;
    
        for(; *str; str++)
            hash = (hash * 1664525) + (unsigned char)(*str) + 1013904223;
    
        return hash;
    }
```
После подсчет хэш-функций клиентом и сервером, сервер осуществит сравнение полученных данных и в случае полодительной проверки подлинности предоставит терминал клиенту на право пользования, в противном случае "обрубит соединение".
В случае положительной проверки пользовательских данных клиент получит сообщение: __"Добро пожаловать!"__ Далее клиенту будет отпрален список всех возможных команд для использования.

Сервер будет осуществлять запуск команд от клиента, извлекая их из сообщений. Каждое сообщение для удобства будет помещаться в буфер типа char размером до 256 байт. 

Каждую полученную команду сервер будет проверять по файлу всех команд для данного пользователя.

Команды будут вызываться в терминале с помощью функции __popen__ из библиотеки __stdio.h__. Результат выполнения будет записываться в бубчер размером 1024 байта и отправляться клиенту.

###Обработка сервером ошибок
В случае если на сервере появилась ошибка при запуске команды из терминала, то клиенту будет отправлено соответствующее сообщение об ошибке, а сервер приостановит процесс выполнения команд и отключит клиента.

Ошибки соединения контролируются пользователем на компьютере клиента, в случае неудачного присоединения пользователь сам совершит переприсоединение к серверу.

###Описание протокола взаимодействия клиентской части

__Клиентская часть__ осуществляет запрос на главный компьютер с целью получить терминал компьютера в пользование. Все сообщения посылаемые клиентом помещаются в символьный буфер размером 256 байт. Запрос на подключение к терминалу сервера осуществляется автоматически: имя пользователя и пароль отправляются сразу после подключения к серверу, полученное число для вычисления хэш-функции принимается автоматически, этап аутентификации также осуществляется самостоятельно без пользователя, пользователю останется только дождаться сообщения о готовности использования терминала: "Добро пожаловать!". 
Пароль и имя пользователя хранятся в файле .txt, который будет менять сам пользователь. Клиентская программа извлекает данные о пользователе и отправляет их на сервер.

Список полученных команд на использовании в терминале сохраняется в файле, и используется для проверки вводимых пользователем команд для отправки на сервер.

Пользователю достаточно вводить используемые команды в командной строке при наличии подключения. 

Обработчик ошибок осуществляет обработку проблем подключения к серверу с выводом сообщений об ошибке на пользовательскую консоль.